version: 2.1

commands:
  install-ansible:
    description: Install Ansible (on Alpine Linux)
    steps:
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
  install-tar-gzip:
    description: Install tar-gzip (on Amazon Linux).
    steps:
      - run:
          name: Install tar-gzip
          command: |
            yum install -y tar gzip
  destroy-environment:
    description: Destroy CFN stack given a workflow ID.
    steps:
      - run:
          name: Destroy stack
          when: on_fail
          command: |
            aws --version || (apk add curl && \
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" && \
              unzip awscli-bundle.zip && ./awscli-bundle/install -b /usr/local/bin/aws && \
            rm -rf awscli-bundle* && rm -rf awscli-bundle.zip)
            
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive || echo
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert migrations
    steps:
      - restore_cache:
          keys:
            - backend-modules-{{ checksum "backend/package.json" }}
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/K3NbKJu4yxah8HWLYFPMiV/migration_${CIRCLE_WORKFLOW_ID:0:7})
            
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm run migration:revert
            fi
            
            npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-modules]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-modules-{{ checksum "frontend/package.json" }}

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-modules]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-modules-{{ checksum "backend/package.json" }}

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    parallelism: 3
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-modules-{{ checksum "frontend/package.json" }}
      - run:
          name: Front-end test
          command: |
            cd frontend
            TEST_FILES=$(circleci tests glob "frontend/**/*.spec.tsx" | circleci tests split --split-by=timings)
            npm test $TEST_FILES

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    parallelism: 3
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-modules-{{ checksum "backend/package.json" }}
      - run:
          name: Back-end test
          command: |
            cd backend
            TEST_FILES=$(circleci tests glob "backend/**/*.spec.ts" | circleci tests split --split-by=timings)
            npm test $TEST_FILES

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-modules-{{ checksum "frontend/package.json" }}
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-modules-{{ checksum "backend/package.json" }}
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical



  get-last-workflow-id:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install jq
          command: |
            yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum -y install jq
      - run:
          name: Get last workflow ID
          command: |
            aws cloudformation describe-stacks --max-items 1 | jq '.Stacks[0].Parameters[0].ParameterValue' | tr -d '"' > last_workflow_id.txt
            cat last_workflow_id.txt
      - install-tar-gzip
      - persist_to_workspace:
          root: ./
          paths:
            - last_workflow_id.txt

  create-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Create backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities CAPABILITY_IAM
      - run:
          name: Create frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities CAPABILITY_IAM
      - run:
          name: Add instance IPs to ansible inventory
          command: |
            echo "[all]" > inventory.txt
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> inventory.txt
      - install-tar-gzip
      - persist_to_workspace:
          root: ./
          paths:
            - inventory.txt
      - destroy-environment
      - revert-migrations

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - af:bc:39:aa:be:fa:c3:25:32:fb:f5:10:4e:75:28:d0
      - attach_workspace:
          at: ./
      - install-ansible
      - run:
          name: Configure Infrastructure
          command: |
            ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment
      - revert-migrations

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-modules-{{ checksum "backend/package.json" }}
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvDB
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              DATA=$(cat backend/migrations_dump.txt)
              curl https://kvdb.io/K3NbKJu4yxah8HWLYFPMiV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d "$DATA"
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install dependencies (nodejs, npm)
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Add backend url to frontend config
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - install-tar-gzip
      - restore_cache:
          keys:
            - frontend-modules-{{ checksum "frontend/package.json" }}
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            # needed to add new .env variables into the prod build
            npm i
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-ansible
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to server
          command: |
            tar -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz backend
            ansible-playbook -i inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies (curl, aws)
          command: |
            (apk add curl && \
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" && \
              unzip awscli-bundle.zip && ./awscli-bundle/install -b /usr/local/bin/aws && \
              rm -rf awscli-bundle* && rm -rf awscli-bundle.zip)
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution with new FE (bucket)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name CDNStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - get-last-workflow-id
      - create-infrastructure:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
      - configure-infrastructure:
          requires:
            - create-infrastructure
      - run-migrations:
          requires:
            - test-backend
            - scan-backend
      - deploy-frontend:
          requires:
            - create-infrastructure
      - deploy-backend:
          requires:
            - configure-infrastructure
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test